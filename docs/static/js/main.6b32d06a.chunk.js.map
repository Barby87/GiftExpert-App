{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"4LA2CeA,EAxCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAwBvC,OACI,sBAAMC,SAhBW,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,UAGRN,EAAWO,OAAOC,OAAS,IAE3BV,GAAc,SAAAW,GAAI,MAAI,CAACT,MAEvBC,EAAc,MAOlB,SACI,uBACIS,KAAK,OACLC,MAAOX,EACPY,SAzBc,SAACT,GAEvBF,EAAcE,EAAEU,OAAOF,a,OCKhBG,EAZK,SAAC,GAAqB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAI3B,OAFAX,QAAQC,IAAM,CAAES,QAAOC,QAGnB,sBAAKC,UAAU,uBAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,kCAAMA,S,uBCTLK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,0FAE6EO,UAAWF,GAFxF,sBAIAG,MAAM,GAAD,OAAKR,IAJV,cAIbS,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAI1CX,QAAQC,IAAIsB,GAhBO,kBAkBZA,GAlBY,4CAAH,sDCkCLM,EA9BC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECAN,SAAEA,GAAe,IAAD,EACdtB,mBAAS,CAC/B4B,KAAM,GACNQ,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAiBxC,OAXAC,qBAAW,WAEPlB,EAAQC,GAAUkB,MAAM,SAAAC,GACpBH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAIlB,CAAEd,IAEEe,EDb0BK,CAAcpB,GAAvCc,EAJsB,EAItBA,QAAcH,EAJQ,EAIbL,KAIjB,OAFAtB,QAAQC,IAAI6B,GAGR,qCACI,qBAAIlB,UAAU,oCAAd,cAAqDI,EAArD,OAGEc,GAAW,mBAAGlB,UAAU,kCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEYe,EAAOH,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAGSA,GAFCA,EAAIC,aEO3BW,EA1BM,WACjB,IADuB,EAEa3C,mBADZ,IADD,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KAIvB,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAEQ6C,EAAWd,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCflCuB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.6b32d06a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        // Actualizar inputValue con el último valor actualizado con lo que la persona escribió en el input\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log('Submit');\r\n\r\n        // Método trim borra espacios en blanco que puedan haber en el input\r\n        if( inputValue.trim().length > 2 ) {\r\n            // Agregando el valor del input (inputValue) al arreglo categories\r\n            setCategories(cats => [inputValue])\r\n            // Limpiar input \r\n            setInputValue('');\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n            {/* <p>{ inputValue }</p> */}\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ( { title, url} ) => {\r\n\r\n    console.log ( { title, url} );\r\n\r\n    return (\r\n        <div className=\"card animate__fadeIn\">\r\n            <img src={ url } alt={ title }/>\r\n            <p> { title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;","export const getGifs = async (category) => {\r\n    // encodeURI elimina espacios de la url\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=Qn6KgF0yP7oEvqW22g842fqeDj2nW5KL&q=${ encodeURI( category ) }&limit=10`;\r\n\r\n    const resp = await fetch( `${url}` );\r\n\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    console.log(gifs);\r\n    // La función asíncrona regresa una promesa que resuelve la colección de las imágenes\r\n    return gifs;\r\n}","import React from 'react';\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({ category }) => {\r\n    // Desestructurando objeto state que retorna la función useFetchGifs\r\n    // Mandando como argumento la categoría a useFetchGifs\r\n    // Renombrando la variable data a images\r\n    const { loading, data:images } = useFetchGifs( category );\r\n\r\n    console.log(loading);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n            {/* Forma corta de operador ternaro, no evalúa una segunda condición */}\r\n            { loading && <p className=\"animate__animated animate_flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        images.map( img => (\r\n                            <GifGridItem \r\n                                key={ img.id }\r\n                                // Mandando elementos del objeto img como props\r\n                                { ...img }\r\n                            />\r\n                        ))\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n// Recibiendo category desde GifGrid\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        // Función getGifs retorna una promesa\r\n        getGifs(category).then( imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        })\r\n    // Si la categoría cambia, se volverá a ejecutar useEffect\r\n    }, [ category ]);\r\n\r\n    return state; // {data: [], loading: true}\r\n}","import React, {useState} from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    const categoriesArray = [];\r\n    const [categories, setCategories] = useState(categoriesArray);\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={ category }\r\n                            category={ category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}